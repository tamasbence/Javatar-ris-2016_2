/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sun Nov 27 09:41:54 GMT 2016
 */

package hu.bme.mit.swsv.ris.tsm.impl;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class SafetyLogicImpl_ESTest_scaffolding {

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);

  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "hu.bme.mit.swsv.ris.tsm.impl.SafetyLogicImpl"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init(); 
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("java.vm.vendor", "Oracle Corporation"); 
    java.lang.System.setProperty("java.specification.version", "1.8"); 
            java.lang.System.setProperty("java.home", "/usr/lib/jvm/java-8-openjdk-amd64/jre"); 
            java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("user.home", "/home/bali"); 
                                        java.lang.System.setProperty("user.dir", "/home/bali/Downloads/swsv-ris"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("awt.toolkit", "sun.awt.X11.XToolkit"); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("file.separator", "/"); 
        java.lang.System.setProperty("java.awt.graphicsenv", "sun.awt.X11GraphicsEnvironment"); 
    java.lang.System.setProperty("java.awt.printerjob", "sun.print.PSPrinterJob"); 
    java.lang.System.setProperty("java.class.path", "/tmp/EvoSuite_pathingJar8543122777847723080.jar"); 
    java.lang.System.setProperty("java.class.version", "52.0"); 
        java.lang.System.setProperty("java.endorsed.dirs", "/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/endorsed"); 
    java.lang.System.setProperty("java.ext.dirs", "/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext:/usr/java/packages/lib/ext"); 
    java.lang.System.setProperty("java.library.path", "lib"); 
    java.lang.System.setProperty("java.runtime.name", "OpenJDK Runtime Environment"); 
    java.lang.System.setProperty("java.runtime.version", "1.8.0_111-8u111-b14-2ubuntu0.16.04.2-b14"); 
    java.lang.System.setProperty("java.specification.name", "Java Platform API Specification"); 
    java.lang.System.setProperty("java.specification.vendor", "Oracle Corporation"); 
        java.lang.System.setProperty("java.vendor", "Oracle Corporation"); 
    java.lang.System.setProperty("java.vendor.url", "http://java.oracle.com/"); 
    java.lang.System.setProperty("java.version", "1.8.0_111"); 
    java.lang.System.setProperty("java.vm.info", "mixed mode"); 
    java.lang.System.setProperty("java.vm.name", "OpenJDK 64-Bit Server VM"); 
    java.lang.System.setProperty("java.vm.specification.name", "Java Virtual Machine Specification"); 
    java.lang.System.setProperty("java.vm.specification.vendor", "Oracle Corporation"); 
    java.lang.System.setProperty("java.vm.specification.version", "1.8"); 
    java.lang.System.setProperty("java.vm.version", "25.111-b14"); 
    java.lang.System.setProperty("line.separator", "\n"); 
    java.lang.System.setProperty("os.arch", "amd64"); 
    java.lang.System.setProperty("os.name", "Linux"); 
    java.lang.System.setProperty("os.version", "4.4.0-47-generic"); 
    java.lang.System.setProperty("path.separator", ":"); 
    java.lang.System.setProperty("user.country", "US"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.name", "bali"); 
    java.lang.System.setProperty("user.timezone", "Europe/Budapest"); 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(SafetyLogicImpl_ESTest_scaffolding.class.getClassLoader() ,
      "org.eclipse.paho.client.mqttv3.MqttMessage",
      "hu.bme.mit.swsv.ris.tsm.SafetyLogic",
      "hu.bme.mit.swsv.ris.common.logging.LogEntry",
      "org.eclipse.paho.client.mqttv3.MqttPersistable",
      "org.eclipse.paho.client.mqttv3.MqttConnectOptions",
      "org.eclipse.paho.client.mqttv3.MqttTopic",
      "org.eclipse.paho.client.mqttv3.internal.wire.MqttSuback",
      "org.eclipse.paho.client.mqttv3.internal.wire.MqttPublish",
      "org.eclipse.paho.client.mqttv3.MqttAsyncClient$ReconnectTask",
      "org.eclipse.paho.client.mqttv3.internal.Token",
      "org.eclipse.paho.client.mqttv3.internal.wire.MqttWireMessage",
      "hu.bme.mit.swsv.ris.tsm.impl.SafetyLogicImpl$1",
      "org.eclipse.paho.client.mqttv3.IMqttDeliveryToken",
      "org.eclipse.paho.client.mqttv3.internal.wire.MqttDisconnect",
      "org.eclipse.paho.client.mqttv3.IMqttActionListener",
      "org.eclipse.paho.client.mqttv3.internal.TCPNetworkModule",
      "org.eclipse.paho.client.mqttv3.TimerPingSender",
      "org.eclipse.paho.client.mqttv3.MqttClientPersistence",
      "org.eclipse.paho.client.mqttv3.TimerPingSender$PingTask",
      "org.eclipse.paho.client.mqttv3.internal.IDisconnectedBufferCallback",
      "org.eclipse.paho.client.mqttv3.internal.wire.MqttConnect",
      "org.eclipse.paho.client.mqttv3.MqttCallbackExtended",
      "org.eclipse.paho.client.mqttv3.internal.wire.MqttConnack",
      "org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketSecureNetworkModule$1",
      "org.eclipse.paho.client.mqttv3.internal.CommsSender",
      "org.eclipse.paho.client.mqttv3.IMqttMessageListener",
      "hu.bme.mit.swsv.ris.tsm.impl.SafetyLogicImpl",
      "org.eclipse.paho.client.mqttv3.MqttException",
      "org.eclipse.paho.client.mqttv3.MqttPersistenceException",
      "org.eclipse.paho.client.mqttv3.MqttAsyncClient",
      "org.eclipse.paho.client.mqttv3.MqttPingSender",
      "hu.bme.mit.swsv.ris.common.logging.LoggerWrapper$1",
      "org.eclipse.paho.client.mqttv3.internal.CommsReceiver",
      "org.eclipse.paho.client.mqttv3.internal.wire.MqttPersistableWireMessage",
      "hu.bme.mit.swsv.ris.tsm.impl.PahoMQTTClientImpl",
      "org.eclipse.paho.client.mqttv3.internal.NetworkModule",
      "org.eclipse.paho.client.mqttv3.internal.wire.MqttPingReq",
      "org.eclipse.paho.client.mqttv3.logging.JSR47Logger",
      "org.eclipse.paho.client.mqttv3.internal.ClientComms",
      "hu.bme.mit.swsv.ris.common.NeighborTSMInfo",
      "hu.bme.mit.swsv.ris.signals.TurnoutDirectionSignal",
      "org.eclipse.paho.client.mqttv3.IMqttToken",
      "org.eclipse.paho.client.mqttv3.MqttSecurityException",
      "org.eclipse.paho.client.mqttv3.internal.MessageCatalog",
      "hu.bme.mit.swsv.ris.common.NeighborTSMInfo$UnknownNeighborTurnoutInfo",
      "hu.bme.mit.swsv.ris.common.mq.AbstractPahoMQTTClient",
      "org.eclipse.paho.client.mqttv3.internal.DisconnectedMessageBuffer",
      "org.eclipse.paho.client.mqttv3.MqttCallback",
      "org.eclipse.paho.client.mqttv3.internal.wire.MultiByteInteger",
      "hu.bme.mit.swsv.ris.tsm.SignalMapper",
      "org.eclipse.paho.client.mqttv3.internal.ClientState",
      "org.eclipse.paho.client.mqttv3.internal.CommsTokenStore",
      "org.eclipse.paho.client.mqttv3.internal.wire.MqttReceivedMessage",
      "hu.bme.mit.swsv.ris.common.SideTriple",
      "hu.bme.mit.swsv.ris.signals.AbstractSignal",
      "org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketNetworkModule$1",
      "hu.bme.mit.swsv.ris.common.NeighborTSMStatus",
      "hu.bme.mit.swsv.ris.tsm.MQClient",
      "org.eclipse.paho.client.mqttv3.internal.wire.MqttAck",
      "org.eclipse.paho.client.mqttv3.internal.wire.MqttPubRel",
      "org.eclipse.paho.client.mqttv3.internal.wire.MqttPingResp",
      "org.eclipse.paho.client.mqttv3.internal.wire.MqttPubComp",
      "org.eclipse.paho.client.mqttv3.logging.Logger",
      "org.eclipse.paho.client.mqttv3.IMqttAsyncClient",
      "org.eclipse.paho.client.mqttv3.internal.wire.MqttUnsubscribe",
      "org.eclipse.paho.client.mqttv3.MqttDeliveryToken",
      "hu.bme.mit.swsv.ris.common.Side",
      "org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketNetworkModule",
      "org.eclipse.paho.client.mqttv3.internal.wire.CountingInputStream",
      "org.eclipse.paho.client.mqttv3.internal.wire.MqttPubAck",
      "hu.bme.mit.swsv.ris.common.SectionOccupancy",
      "org.eclipse.paho.client.mqttv3.internal.SSLNetworkModule",
      "org.eclipse.paho.client.mqttv3.util.Debug",
      "org.eclipse.paho.client.mqttv3.internal.wire.MqttPubRec",
      "hu.bme.mit.swsv.ris.common.Direction",
      "hu.bme.mit.swsv.ris.signals.SectionControlSignal",
      "hu.bme.mit.swsv.ris.signals.HeartBeatSignal",
      "hu.bme.mit.swsv.ris.signals.AbstractTargetedSignal",
      "org.eclipse.paho.client.mqttv3.internal.wire.MultiByteArrayInputStream",
      "hu.bme.mit.swsv.ris.tsm.impl.SignalMapperImpl",
      "org.eclipse.paho.client.mqttv3.logging.LoggerFactory",
      "org.eclipse.paho.client.mqttv3.internal.LocalNetworkModule",
      "org.apache.commons.lang3.Validate",
      "hu.bme.mit.swsv.ris.signals.SectionOccupancySignal",
      "hu.bme.mit.swsv.ris.common.SectionControl",
      "org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketSecureNetworkModule",
      "hu.bme.mit.swsv.ris.common.NeighborTSMInfo$KnownNeighborTurnoutInfo",
      "org.eclipse.paho.client.mqttv3.DisconnectedBufferOptions",
      "org.eclipse.paho.client.mqttv3.internal.wire.MqttSubscribe",
      "hu.bme.mit.swsv.ris.common.logging.LoggerWrapper",
      "hu.bme.mit.swsv.ris.common.mq.MQException",
      "org.eclipse.paho.client.mqttv3.MqttToken",
      "org.eclipse.paho.client.mqttv3.internal.CommsCallback",
      "org.eclipse.paho.client.mqttv3.internal.wire.MqttUnsubAck"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(SafetyLogicImpl_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "hu.bme.mit.swsv.ris.tsm.impl.SafetyLogicImpl",
      "hu.bme.mit.swsv.ris.common.Side",
      "hu.bme.mit.swsv.ris.common.NeighborTSMStatus",
      "hu.bme.mit.swsv.ris.common.logging.LogEntry",
      "hu.bme.mit.swsv.ris.common.SectionControl",
      "hu.bme.mit.swsv.ris.common.SectionOccupancy",
      "hu.bme.mit.swsv.ris.common.Direction",
      "hu.bme.mit.swsv.ris.tsm.impl.SignalMapperImpl",
      "hu.bme.mit.swsv.ris.common.logging.LoggerWrapper$1",
      "hu.bme.mit.swsv.ris.signals.AbstractSignal",
      "hu.bme.mit.swsv.ris.signals.AbstractTargetedSignal",
      "hu.bme.mit.swsv.ris.signals.HeartBeatSignal",
      "hu.bme.mit.swsv.ris.signals.SectionControlSignal",
      "hu.bme.mit.swsv.ris.signals.TurnoutDirectionSignal",
      "hu.bme.mit.swsv.ris.signals.SectionOccupancySignal",
      "hu.bme.mit.swsv.ris.common.mq.AbstractPahoMQTTClient",
      "org.eclipse.paho.client.mqttv3.logging.LoggerFactory",
      "org.eclipse.paho.client.mqttv3.MqttAsyncClient",
      "org.eclipse.paho.client.mqttv3.TimerPingSender",
      "org.eclipse.paho.client.mqttv3.MqttConnectOptions",
      "org.eclipse.paho.client.mqttv3.internal.ClientComms",
      "org.eclipse.paho.client.mqttv3.internal.CommsTokenStore",
      "org.eclipse.paho.client.mqttv3.internal.CommsCallback",
      "org.eclipse.paho.client.mqttv3.internal.ClientState",
      "org.eclipse.paho.client.mqttv3.internal.wire.MqttWireMessage",
      "org.eclipse.paho.client.mqttv3.internal.wire.MqttPingReq",
      "org.eclipse.paho.client.mqttv3.internal.TCPNetworkModule",
      "org.eclipse.paho.client.mqttv3.internal.Token",
      "org.eclipse.paho.client.mqttv3.internal.wire.MqttConnect",
      "hu.bme.mit.swsv.ris.tsm.impl.PahoMQTTClientImpl",
      "hu.bme.mit.swsv.ris.common.NeighborTSMInfo",
      "org.apache.commons.lang3.Validate",
      "org.eclipse.paho.client.mqttv3.DisconnectedBufferOptions",
      "org.eclipse.paho.client.mqttv3.MqttException",
      "org.eclipse.paho.client.mqttv3.internal.MessageCatalog"
    );
  }
}
